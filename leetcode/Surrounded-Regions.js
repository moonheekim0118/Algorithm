/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solve = function (board) {
  const dx = [1, -1, 0, 0];
  const dy = [0, 0, 1, -1];
  const n = board.length;
  const m = board[0].length;
  const visited = new Array(n);
  for (let i = 0; i < n; i++) {
    visited[i] = new Array(m).fill(false);
  }

  let flag = false;
  let records = [];
  function dfs(x, y) {
    if (x === 0 || x === n - 1 || y === 0 || y === m - 1) flag = true;
    visited[x][y] = true;
    records.push({ x, y });
    for (let i = 0; i < 4; i++) {
      const nx = x + dx[i];
      const ny = y + dy[i];
      if (nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
      if (board[nx][ny] === "X" || visited[nx][ny]) continue;
      dfs(nx, ny);
    }
  }

  function flip() {
    records.forEach((v) => {
      board[v.x][v.y] = "X";
    });
    records = [];
  }

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < m; j++) {
      if (board[i][j] === "O" && !visited[i][j]) {
        dfs(i, j);
        if (!flag) flip();
        flag = false;
      }
    }
  }
};

solve([
  [
    "O",
    "X",
    "O",
    "O",
    "X",
    "X",
    "X",
    "O",
    "O",
    "O",
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "O",
    "X",
    "O",
    "X",
  ],
  [
    "X",
    "O",
    "X",
    "O",
    "O",
    "X",
    "X",
    "O",
    "O",
    "X",
    "O",
    "X",
    "O",
    "X",
    "O",
    "X",
    "X",
    "O",
    "O",
    "O",
  ],
  [
    "O",
    "X",
    "O",
    "O",
    "O",
    "X",
    "X",
    "X",
    "X",
    "O",
    "O",
    "O",
    "O",
    "O",
    "X",
    "X",
    "X",
    "X",
    "O",
    "X",
  ],
  [
    "X",
    "X",
    "O",
    "O",
    "O",
    "X",
    "X",
    "O",
    "O",
    "O",
    "X",
    "X",
    "X",
    "O",
    "O",
    "X",
    "O",
    "X",
    "X",
    "O",
  ],
  [
    "O",
    "X",
    "O",
    "X",
    "X",
    "O",
    "X",
    "O",
    "O",
    "O",
    "X",
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "O",
    "O",
    "X",
  ],
  [
    "X",
    "O",
    "O",
    "X",
    "O",
    "X",
    "O",
    "O",
    "O",
    "X",
    "X",
    "O",
    "X",
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "O",
  ],
  [
    "X",
    "O",
    "O",
    "O",
    "X",
    "X",
    "O",
    "O",
    "O",
    "O",
    "O",
    "X",
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "O",
    "X",
  ],
  [
    "X",
    "O",
    "O",
    "O",
    "X",
    "O",
    "X",
    "X",
    "X",
    "O",
    "X",
    "O",
    "X",
    "X",
    "X",
    "X",
    "O",
    "O",
    "O",
    "X",
  ],
  [
    "X",
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "O",
    "O",
    "O",
    "O",
    "O",
    "O",
    "X",
    "O",
    "X",
  ],
  [
    "O",
    "O",
    "O",
    "X",
    "O",
    "X",
    "X",
    "X",
    "X",
    "X",
    "X",
    "X",
    "X",
    "X",
    "O",
    "O",
    "O",
    "O",
    "X",
    "O",
  ],
  [
    "X",
    "O",
    "X",
    "O",
    "X",
    "O",
    "O",
    "X",
    "X",
    "X",
    "O",
    "X",
    "X",
    "O",
    "O",
    "X",
    "X",
    "O",
    "O",
    "O",
  ],
  [
    "O",
    "X",
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "O",
    "O",
    "O",
    "X",
    "X",
    "X",
    "X",
    "O",
    "O",
    "O",
    "X",
    "O",
  ],
  [
    "X",
    "O",
    "O",
    "O",
    "X",
    "X",
    "X",
    "O",
    "X",
    "O",
    "O",
    "O",
    "X",
    "O",
    "X",
    "O",
    "X",
    "O",
    "O",
    "X",
  ],
  [
    "O",
    "O",
    "O",
    "O",
    "X",
    "O",
    "X",
    "X",
    "O",
    "X",
    "O",
    "X",
    "O",
    "X",
    "X",
    "X",
    "X",
    "O",
    "O",
    "O",
  ],
  [
    "O",
    "X",
    "X",
    "O",
    "O",
    "O",
    "O",
    "X",
    "O",
    "O",
    "X",
    "X",
    "X",
    "O",
    "O",
    "X",
    "X",
    "O",
    "X",
    "O",
  ],
  [
    "X",
    "O",
    "X",
    "X",
    "X",
    "X",
    "X",
    "X",
    "O",
    "X",
    "X",
    "O",
    "X",
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "X",
  ],
  [
    "X",
    "O",
    "O",
    "O",
    "X",
    "O",
    "X",
    "O",
    "O",
    "X",
    "O",
    "X",
    "O",
    "O",
    "X",
    "O",
    "O",
    "X",
    "X",
    "X",
  ],
  [
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "O",
    "X",
    "O",
    "O",
    "X",
    "X",
    "O",
    "X",
    "X",
    "X",
    "O",
    "O",
    "O",
    "O",
  ],
  [
    "O",
    "O",
    "X",
    "O",
    "O",
    "O",
    "O",
    "O",
    "O",
    "X",
    "X",
    "O",
    "X",
    "O",
    "X",
    "O",
    "O",
    "O",
    "X",
    "X",
  ],
  [
    "X",
    "O",
    "O",
    "O",
    "X",
    "O",
    "X",
    "X",
    "X",
    "O",
    "O",
    "X",
    "O",
    "X",
    "O",
    "X",
    "X",
    "O",
    "O",
    "O",
  ],
]);

// node Surrounded-Regions
